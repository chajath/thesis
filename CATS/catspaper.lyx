#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass CRPITStyle
\begin_preamble
\newcommand\conferencenameandplace{First Australasian Web Conference (AWC2013), Adelaide, Australia, January 2013} \newcommand\volumenumber{xx} \newcommand\conferenceyear{2013} 
\newcommand\editorname {Helen Ashman, Quan Z. Sheng and Andrew Trotman}

\usepackage[auth-lg]{authblk}
   \author{In-Ho Yi}
   \author{Peter Schachte}
   \author{Harald SÃ¸ndergaard}
   \affil{The University of Melbourne}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Type Analysis of a Duck-Typing and Reflecting Language
\end_layout

\begin_layout Abstract
We construct an analytic framework on which we perform a static analysis
 of a duck typing language.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
toappearstandard
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Recent years have seen the growing interest on dynamic typing languages.
 Traditionally these languages were termed 
\begin_inset Quotes eld
\end_inset

scripting
\begin_inset Quotes erd
\end_inset

 languages, as they were mainly used for automating tasks and processing
 strings.
 However, with the advent of Web environment, languages such as Perl and
 PHP gained popularity as languages for web application development.
 On a client side, web pages make heavy use of JavaScript, a dynamic typing
 language, to deliver dynamic contents to the browser.
 Recent years have seen increasing use of JavaScript in server side environment,
 as well.
\end_layout

\begin_layout Standard
What these languages provide is an ability to rapidly prototype and validate
 application models in a real time REPL environment.
 Another strength comes from the fact that programmers do not need to have
 a class structure defined upfront.
 Rather, class structures and types of variables in general are dynamically
 built.
 This reduces an initial overhead of software design.
\end_layout

\begin_layout Standard
However, these features come at a cost.
 Lacking formal and static definition of type information makes dynamically
 typing languages harder to analyse.
 This difficulty causes several practical problems.
 
\end_layout

\begin_layout Standard
First, it has been noted that as applications become more mature, more efforts
 are devoted to program unit testing or assertions to make sure type safety
 of systems.
 These extra overheads can sometimes overshoot the benefit of having a dynamical
ly typing language.
\end_layout

\begin_layout Standard
Second, whereas programmers writing statically typed languages enjoy the
 abundance of development tools, tools aiding development of dynamically
 typed languages are lacking powers, largely due to the difficulty and sometimes
 infeasibility of conduct a type analysis.
\end_layout

\begin_layout Standard
Finally, not having a static type structure has a significant performance
 implication.
 There are ongoing development in the industry at large to overcome and
 improve the performance of dynamically typing languages.
\end_layout

\begin_layout Standard
With these problems in mind, the aim of this paper is to develop an analytic
 framework for a type analysis of a dynamic typing language.
 We design a toy language that showcases 
\begin_inset Quotes eld
\end_inset

dynamism
\begin_inset Quotes erd
\end_inset

 built in some of the aforementioned scripting languages, such as duck-typing,
 reflection and function currying.
 A notable omission is a closure scoping.
 However, allowing function currying gives enough expressive power to the
 toy language.
\end_layout

\begin_layout Standard
We then develop a framework that, depending on definitions of abstract functions
, can function as both denotational semantics and abstract interpretation.
 The focus of this effort is to build a theoretical system where much of
 the proof of correctness is 
\emph on
built in to the system
\emph default
, thereby allowing theoreticians to avoid reproducing large body of work
 in both semantics and abstract interpretation, and focus at the core of
 the problem, that is the definition of abstract domains and their correlation
 with the concrete environment.
\end_layout

\begin_layout Section
Related works
\end_layout

\end_body
\end_document
