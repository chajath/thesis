#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{stmaryrd}
\newcommand{\dd}[1]{\llbracket#1\rrbracket}
\end_preamble
\options fleqn
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Abstract functions
\end_layout

\begin_layout Itemize
Branching (if-then-else vs.
 union)
\end_layout

\begin_deeper
\begin_layout Itemize
cond
\end_layout

\begin_layout Itemize
isterm
\end_layout

\end_deeper
\begin_layout Itemize
Basic expressions (concrete value vs.
 singleton set)
\end_layout

\begin_layout Itemize
Assignment
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\mathtt{asg}:ID\rightarrow Value\rightarrow\rho\rightarrow\rho$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $\mathtt{member}:OBJ\rightarrow ID\rightarrow Value\rightarrow\rho\rightarrow\rho$
\end_inset


\end_layout

\begin_layout Itemize
conval
\end_layout

\begin_layout Itemize
obj
\end_layout

\begin_layout Itemize
getthis
\end_layout

\begin_layout Itemize
getinput
\end_layout

\begin_layout Itemize
call: n,p,m,f,rho
\end_layout

\begin_layout Paragraph
Statement to initial and final state mapping
\end_layout

\begin_layout Standard
\begin_inset Formula $\sigma:s\rightarrow\rho\rightarrow\rho$
\end_inset


\end_layout

\begin_layout Paragraph
Auxiliary functions
\end_layout

\begin_layout Standard
\begin_inset Formula $M_{S}$
\end_inset

 is a state transformer monad that takes a list of vectors (variable name,
 lambda expressions) with free variables and produces a state transformer
 with return value.
\end_layout

\begin_layout Standard
\begin_inset Formula $M_{S}:\left[p\times\left(\beta\rightarrow\left(\rho\times\sigma\right)\rightarrow\left(\rho\times\sigma\times\alpha\right)\right)\right]\rightarrow\beta\rightarrow\left(\rho\times\sigma\right)\rightarrow\left(\rho\times\sigma\times\alpha\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $M_{S}\ \left[T_{0}\right]=T_{0}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $M_{S}\ \left[\left\langle p_{0},T_{0}\right\rangle |T_{rest}\right]\ b\ \rho\ \sigma=\left(\lambda p_{0}.M_{S}\ T_{rest}\ b\ \rho'\ \sigma'\right)\ v_{0}$
\end_inset


\end_layout

\begin_layout Standard
where 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left\langle \rho',\sigma',v_{0}\right\rangle =T_{0}\ \rho\ \sigma$
\end_inset


\end_layout

\begin_layout Itemize
Pass 
\begin_inset Formula $p_{0}$
\end_inset

 on as a free variable, i.e.
 
\begin_inset Formula $p_{0}\in FV\left(T_{rest}\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $I_{\rho}$
\end_inset

 Identity state transformer takes a constant and lifts it to a identity
 state transformer with the constant as a return value
\end_layout

\begin_layout Standard
\begin_inset Formula $I_{\rho}:\alpha\rightarrow\beta\rightarrow\left(\rho\times\sigma\right)\rightarrow\left(\rho\times\sigma\times\alpha\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $I_{\rho}\ v\ \_\ \rho\ \sigma=\left\langle \rho,\sigma,v\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $I_{S}$
\end_inset

 lifts a state transformer to a state transformer with state collector passing
 through
\end_layout

\begin_layout Standard
\begin_inset Formula $I_{S}:\left(\rho\rightarrow\rho\times\alpha\right)\rightarrow\left(\rho\times\sigma\right)\rightarrow\left(\rho\times\sigma\times\alpha\right)$
\end_inset


\end_layout

\begin_layout Paragraph
We define following functions
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{alignat*}{2}
 & T_{S} & : & s\rightarrow\left(\beta\rightarrow\rho\times\sigma\rightarrow\left(\rho\times\sigma\times\alpha\right)\right)\rightarrow\left(\beta\rightarrow\rho\times\sigma\rightarrow\left(\rho\times\sigma\times\alpha\right)\right)\\
 & T_{S}\ X\ f\ \rho\ \sigma\ s & = & \left\langle \rho',\sigma'',\alpha'\right\rangle \\
 &  &  & \begin{aligned}\mbox{where} & \left\langle \rho',\sigma',\alpha'\right\rangle =X\ f\ \rho\ \sigma\\
 & \sigma''=\sigma'\left[s\times\rho\mapsto\rho'\right]
\end{aligned}
\end{alignat*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathcal{F} & : & number\rightarrow\left(\rho\times\sigma\rightarrow\left(\rho\times\sigma\times\alpha\right)\right)\\
\mathcal{S} & : & Stmt\rightarrow\mathcal{F}\rightarrow s\rightarrow\left(\rho\times\sigma\rightarrow\left(\rho\times\sigma\times\alpha\right)\right)\\
\mathcal{E} & : & Expr\rightarrow\mathcal{F}\rightarrow\rho\rightarrow\rho\times Value
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
 & \mathcal{F} & = & Y\lambda f.\lambda n.\mathcal{S}\dd{\mathtt{Stmt}_{n}}\ \mathtt{sid}\left(\mathtt{Stmt}_{n}\right)\ f\\
 & \mathcal{S}\dd{S_{1};S_{2}} & = & T_{S}\ M_{S}\left(\begin{aligned} & \left\langle r,S\dd{S_{1}}\ \mathtt{sid}\left(S_{1}\right)\right\rangle \\
 & \left\langle \_,\mathtt{isterm}\left(r,\lambda.S\dd{S_{2}}\ \mathtt{sid}\left(S_{2}\right)\right)\right\rangle 
\end{aligned}
\right)\\
 & \mathcal{S}\dd{\mathtt{return}\ e} & = & T_{S}\ \mathcal{E}\dd{e}\\
 & \mathcal{S}\dd{\mathtt{if}\left(e\right)S_{1}}\ f & = & T_{S}\ M_{S}\left(\begin{aligned} & \left\langle v,\mathcal{E}\dd{e}\right\rangle \\
 & \left\langle \_,\mathtt{cond}\left(v,\mathcal{S}\dd{S_{1}},I_{\rho}\ NoReturn\right)\right\rangle 
\end{aligned}
\right)\\
 & \mathcal{S}\dd{\mathtt{if}\left(e\right)S_{1}\mathtt{else}S_{2}}\ f & = & T_{S}\ M_{S}\left(\begin{aligned} & \left\langle v,\mathcal{E}\dd{e}\right\rangle \\
 & \left\langle \_,\mathtt{cond}\left(v,\mathcal{S}\dd{S_{1}},\mathcal{S}\dd{S_{2}}\right)\right\rangle 
\end{aligned}
\right)\\
 & \mathcal{S}\dd{id=e} & = & T_{S}\ M_{S}\left(\begin{aligned} & \left\langle v,\mathcal{E}\dd{e}\right\rangle \\
 & \left\langle \_,\mathtt{asg}\left(id,v\right)\right\rangle \\
 & \left\langle \_,I_{\rho}\ NoReturn\right\rangle 
\end{aligned}
\right)\\
 & \mathcal{S}\dd{e_{1}.id=e_{2}} & = & T_{S}\ M_{S}\left(\begin{aligned} & \left\langle v,\mathcal{E}\dd{e_{2}}\right\rangle \\
 & \left\langle r,\mathcal{E}\dd{e_{1}}\right\rangle \\
 & \left\langle \_,\mathtt{member}\left(r,id,v\right)\right\rangle 
\end{aligned}
\right)\\
 & \mathcal{S}\dd{\mathtt{while}\left(e\right)S_{1}}\ f\ \rho & = & T_{S}\ \left(Y\lambda x.\lambda\rho,r.\mathtt{isterm}\left(r,M_{S}\left(\begin{aligned} & \left\langle v,\mathcal{E}\dd{e}\right\rangle \\
 & \left\langle \_,\mathtt{cond}\left(v,\lambda f,\rho'.x\ \left(\mathcal{S}\dd{S_{1}}\ \mathtt{sid}\left(S_{1}\right)f\ \rho'\right),I_{\rho}\ NoRet\right)\right\rangle 
\end{aligned}
\right)\ f\right)\right)\ \rho\ NoRet\\
 & \mathcal{E}\dd{con} & = & T_{S}\ M_{S}\ \left\langle \_,I_{\rho}\ \mathtt{conval}\left(con\right)\right\rangle \\
 & \mathcal{E}\dd{\mathtt{global}} & = & T_{S}\ M_{S}\ \left\langle \_,\lambda f.\rho.\sigma.I_{\rho}\ \mathtt{obj}\left(0,\rho\right)\right\rangle \\
 & \mathcal{E}\dd{L} & = & T_{S}\ \mathcal{L}\dd{L}\\
 & \mathcal{E}\dd{\mathtt{this}} & = & T_{S}\ M_{S}\ \left\langle \_,\lambda f.\rho.\sigma.I_{\rho}\ \mathtt{getthis}\left(\rho\right)\right\rangle \\
 & \mathcal{E}\dd{\mathtt{input}} & = & T_{S}\ M_{S}\ \left\langle \_,I_{S}\ \lambda f.\rho.\mathtt{getinput}\left(\rho\right)\right\rangle \\
 & \mathcal{E}\dd{\mathtt{new}\ L\left(E*\right)} & = & T_{S}\ M_{s}\left(\begin{aligned} & \left\langle n,\mathcal{L}\ \dd{L}\right\rangle \\
 & \left\langle p,\mathtt{evalParams}\ E*\ \phi\right\rangle \\
 & \left\langle m,\lambda f.\rho.\mathtt{newobj}\left(\rho\right)\right\rangle \\
 & \left\langle \_,\lambda f.\rho.\mathtt{call}\left(n,p,m,f,\rho,\mathtt{eid}\right)\right\rangle \\
 & \left\langle \_,I_{\rho}\ m\right\rangle 
\end{aligned}
\right)\\
 & \mathcal{E}\dd{L\left(E*\right)} & = & T_{S}\ M_{S}\left(\begin{aligned} & \left\langle n,\mathcal{L}\ \dd{L}\right\rangle \\
 & \left\langle p,\mathtt{evalParams}\ E*\ \phi\right\rangle \\
 & \left\langle \_,\lambda f,p.\mathtt{call}\left(n,p,\mathtt{obj}\left(0,\rho\right),f,\rho,\mathtt{eid}\right)\right\rangle 
\end{aligned}
\right)\\
 & \mathcal{E}\dd{E_{0}.L\left(E*\right)} & = & T_{S}\ M_{S}\left(\begin{aligned} & \left\langle t,\mathcal{E}\ \dd{E_{0}}\right\rangle \\
 & \left\langle n,\mathcal{L}\ \dd{L}\right\rangle \\
 & \left\langle p,\mathtt{evalParams}\ E*\ \phi\right\rangle \\
 & \left\langle \_,\lambda f,p.\mathtt{call}\left(n,p,t,f,\rho,\mathtt{eid}\right)\right\rangle 
\end{aligned}
\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Where
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{Stmt}_{n}$
\end_inset

 is a function body of a function numbered 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Paragraph
Concrete functions
\end_layout

\begin_layout Standard
\begin_inset Formula $Value=\mathbb{Z}\cup\left\{ T,F\right\} \cup Objects\cup FunctionPointers$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $Objects=\left\{ OBJ_{n}|n\in\left\{ 0\right\} \cup\mathbb{N}\right\} $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $FunctionPointers=\left\langle FP_{n},id\rightarrow Value\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\rho=\left\langle V,OM,T\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $V=id\rightarrow Value$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $OM=n\rightarrow V$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathtt{isterm}\left(v,s\right) & = & \begin{cases}
s & v=NoReturn\\
I_{\rho}\ v & \mbox{otherwise}
\end{cases}\\
\mathtt{cond}\left(v,s_{1},s_{2}\right) & = & \begin{cases}
s_{1} & v=true\\
s_{2} & v=false
\end{cases}\\
\mathtt{asg}\left(id,v\right) & = & \lambda f,\left\langle V,OM,T\right\rangle .\left\langle V\left[id=v\right],OM,T\right\rangle \\
\mathtt{member}\left(OBJ_{n},id,v\right) & = & \lambda f,\left\langle V,OM,T\right\rangle .\left\langle V,OM\left[OBJ_{n}\left[id\mapsto v\right]\right],T\right\rangle \\
\mathtt{conval}\left(con\right) & = & con\\
\mathtt{obj}\left(n,\left\langle V,OM,T\right\rangle \right) & = & OM\left(n\right)\\
\mathtt{getthis}\left(\left\langle V,OM,T\right\rangle \right) & = & T\\
\mathtt{getinput\left(\rho\right)} & =\\
\mathtt{newobj}\left(\left\langle V,OM,T\right\rangle \right) & = & \left\langle \left\langle V,OM\left[n\mapsto\phi\right],T\right\rangle ,OBJ_{n}\right\rangle \ \mbox{where}\ n=N\left(OM\right)\\
\mathtt{call}\left(\left\langle FP_{n},C\right\rangle ,p,t,f,\left\langle V,OM,T\right\rangle ,s,\_\right) & = & \begin{cases}
\left\langle \left\langle V,OM',T\right\rangle ,s',r\right\rangle \ \mbox{where}\ \left\langle \left\langle V',OM',T'\right\rangle ,s',r\right\rangle =f\ n\ \left\langle C\backslash p,OM,t\right\rangle \ s & N\left(C\right)+N\left(p\right)=arity_{n}\\
\left\langle \left\langle V,OM,T\right\rangle ,s,\left\langle FP_{n},C\backslash p\right\rangle \right\rangle  & \mbox{otherwise}
\end{cases}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Paragraph
Abstract functions for Forward-may analysis 
\end_layout

\begin_layout Standard
problematic when we have an infinite loop of currying
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\rho & = & \left\langle \sigma,\alpha,\tau,\nu\right\rangle \\
Pri & = & \left\{ Number,Boolean\right\} \\
Obj & = & \left\{ OBJ_{n}|n\in\left\{ 0\right\} \cup\mathbb{N}\right\} \\
FunctionPointers & = & \left\langle FP_{n},id\rightarrow\wp\left(Pri\cup Obj\cup\left\{ FP_{n}\right\} \cup\left\{ \left\langle FC,n,c,eid\right\rangle \right\} \right)\right\rangle \\
AbsVal & = & Pri\cup Obj\cup FunctionPointers\\
\sigma & = & id\rightarrow\wp\left(AbsVal\right)\\
\alpha & = & n\rightarrow\sigma\\
\tau & = & \wp\left(Obj\right)\\
\nu & = & \left\langle n,c,eid\right\rangle \rightarrow\left(id\rightarrow\wp\left(Pri\cup Obj\cup\left\{ \left\langle FC,n,c,eid\right\rangle \right\} \right)\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
In 
\begin_inset Formula $OBJ_{n}$
\end_inset

:
\end_layout

\begin_layout Standard
We number each of the 
\begin_inset Quotes eld
\end_inset

new
\begin_inset Quotes erd
\end_inset

 expressions as we parse the program.
 The number n corresponds to the 
\begin_inset Quotes eld
\end_inset

new
\begin_inset Quotes erd
\end_inset

 expression number.
\end_layout

\begin_layout Standard
In 
\begin_inset Formula $\left\langle FC,n,c,eid\right\rangle $
\end_inset

:
\end_layout

\begin_layout Standard
n = function number
\end_layout

\begin_layout Standard
c = number of arguments curried
\end_layout

\begin_layout Standard
eid = A uid of an expression from which this value has been produced
\end_layout

\begin_layout Example
\begin_inset Argument
status open

\begin_layout Plain Layout
Currying loop
\end_layout

\end_inset

 Consider the following SDTL program.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left"
inline false
status open

\begin_layout Plain Layout

function foo(a,b) {
\end_layout

\begin_layout Plain Layout

	return a;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x = 0;
\end_layout

\begin_layout Plain Layout

while(input < 30) {
\end_layout

\begin_layout Plain Layout

	x = foo(x);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case, in line 7, x is associated with a value 
\begin_inset Formula $\left\langle FP_{1},a\mapsto\left\{ Number,\left\langle FC,1,1,e_{1}\right\rangle \right\} \right\rangle $
\end_inset

 where 
\begin_inset Formula $e_{1}$
\end_inset

 is the eid of 
\begin_inset Formula $\mathtt{foo\left(x\right);}$
\end_inset

 in line 7.
 
\begin_inset Formula $\nu$
\end_inset

 has one entry 
\begin_inset Formula $\left\langle 1,1,e_{1}\right\rangle \mapsto\left\{ a\mapsto\left\{ 0,\left\langle FC,1,1,e_{1}\right\rangle \right\} \right\} $
\end_inset


\end_layout

\begin_layout Fact
\begin_inset Argument
status open

\begin_layout Plain Layout
Finiteness of the abstract property
\end_layout

\end_inset

Given an SDTL program,
\begin_inset Formula $\left\langle \sigma,\alpha,\tau,\nu\right\rangle $
\end_inset

 has a finite domain
\end_layout

\begin_layout Proof
We show that each of the component 
\begin_inset Formula $\sigma,\alpha,\tau,\nu$
\end_inset

 has a finite domain
\end_layout

\begin_deeper
\begin_layout Enumerate
First, we show that the number of possible
\begin_inset Formula $AbsVal$
\end_inset

 is finite.
\end_layout

\begin_deeper
\begin_layout Enumerate
Trivially,
\begin_inset Formula $Pri$
\end_inset

 is a set of two elements.
\end_layout

\begin_layout Enumerate
There are finite number of 
\emph on
new
\emph default
 expressions in a program.
 Therefore number of elements in 
\begin_inset Formula $Obj$
\end_inset

 is finite.
\end_layout

\begin_layout Enumerate
In case of 
\emph on
FunctionPointers
\end_layout

\begin_deeper
\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
There are a finite number of function declarations.
 Each function can only have a set number of parameters.
 There are a finite number of expressions in a program.
 Therefore, number of possible values of
\begin_inset Formula $\left\langle FC,n,c,eid\right\rangle $
\end_inset

is finite.
\end_layout

\begin_layout Enumerate
Each functions have a set number of argument names.
 Therefore, the number of possible
\begin_inset Formula $id$
\end_inset

 is finite.
\end_layout

\begin_layout Enumerate
There are only a finite number of function declarations in a program.
\end_layout

\begin_layout Enumerate
Hence, 
\emph on
FunctionPointers
\emph default
 has a finite domain
\end_layout

\end_deeper
\begin_layout Enumerate
Then, 
\begin_inset Formula $AbsVal$
\end_inset

, a union of finite domains, also has a finite domain.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $\sigma$
\end_inset

 is a composite of two components: 
\emph on
id
\emph default
 and 
\begin_inset Formula $\wp\left(AbsVal\right)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
There are only a finite number of identifiers appearing in a program
\end_layout

\begin_layout Enumerate
\begin_inset Formula $AbsVal$
\end_inset

 has a finite domain.
 Therefore, a powerset of it also has a finite domain.
\end_layout

\end_deeper
\begin_layout Enumerate

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $\alpha$
\end_inset

 has two components, finiteness of which are argued in 1 (b) and 2 respectively.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\tau$
\end_inset

 is a finite as it is a powerset of a finite domain (1 (b))
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\nu$
\end_inset

 has two components: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\left\langle n,c,eid\right\rangle $
\end_inset

 and 
\begin_inset Formula $\left(id\rightarrow\wp\left(Pri\cup Obj\cup\left\{ \left\langle FC,n,c,eid\right\rangle \right\} \right)\right)$
\end_inset

.
 Finiteness of both are argued in 1 (c).
\end_layout

\end_deeper
\begin_layout Definition
\begin_inset Argument
status open

\begin_layout Plain Layout
Partial ordering
\end_layout

\end_inset

We define a partial ordering 
\begin_inset Formula $\sqsubseteq$
\end_inset

 between abstract environments as thus:
\end_layout

\begin_layout Definition
\begin_inset Formula $\left\langle \sigma_{1},\alpha_{1},\tau_{1},\nu_{1}\right\rangle \sqsubseteq\left\langle \sigma_{2},\alpha_{2},\tau_{2},\nu_{2}\right\rangle \ \mbox{iff}\ $
\end_inset


\end_layout

\begin_layout Standard
define 
\begin_inset Formula $\rho_{1}\sqcup\rho_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left\langle \rho_{1},r_{1}\right\rangle \sqcup\left\langle \rho_{2},r_{2}\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left\langle \rho_{1},\sigma_{1},r_{1}\right\rangle \sqcup\left\langle \rho_{2},\sigma_{2},r_{2}\right\rangle =\left\langle \rho_{1}\sqcup\rho_{2},\sigma_{1}\cup\sigma_{2},r_{1}\sqcup r_{2}\right\rangle $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mathtt{isterm}\left(v,s\right) & = & \begin{cases}
s & v=\left\{ NoReturn\right\} \\
I_{\rho}\ v & \mbox{otherwise}
\end{cases}\\
\mathtt{cond}\left(v,s_{1},s_{2}\right) & = & s_{1}\sqcup s_{2}\\
\mathtt{asg}\left(id,v\right) & = & \lambda f,\left\langle \sigma,\alpha,\tau\right\rangle .\left\langle \sigma\left[id=v\right],\alpha,\tau\right\rangle \\
\mathtt{member}\left(n,id,v\right) & = & \lambda f,\left\langle \sigma,\alpha,\tau\right\rangle .\left\langle \sigma,\left\{ x|OBJ_{x}\in\alpha,x=\begin{cases}
\alpha\left(x\right)\left[id\mapsto v\right] & OBJ_{x}\in n\\
\alpha\left(x\right) & \mbox{otherwise}
\end{cases}\right\} ,\tau\right\rangle \\
\mathtt{conval}\left(con\right) & = & \begin{cases}
Number & con\in\mathbb{N}\\
Boolean & con\in\left\{ true,false\right\} 
\end{cases}\\
\mathtt{obj}\left(n,\left\langle \sigma,\alpha,\tau,\nu\right\rangle \right) & = & \alpha\left(n\right)\\
\mathtt{getthis}\left(\left\langle \sigma,\alpha,\tau,\nu\right\rangle \right) & = & \tau\\
\mathtt{getinput\left(\rho\right)} & = & \left\langle \rho,\left\{ Number\right\} \right\rangle \\
\mathtt{newobj}\left(\left\langle \sigma,\alpha,\tau,\nu\right\rangle \right) & = & \left\langle \left\langle \sigma,\alpha\left[n\mapsto\phi\right],\tau\right\rangle ,OBJ_{n},\nu\right\rangle \ \mbox{where}\ n=N\left(\alpha\right)\\
\mathtt{call}\left(n,p,t,f,\left\langle \sigma,\alpha,\tau,\nu\right\rangle ,s,e\right) & = & \underset{\left\langle FP_{x},C\right\rangle \in n}{\bigsqcup}\mathtt{scall}\left(\left\langle FP_{x},C\right\rangle ,p,t,f,\left\langle \sigma,\alpha,\tau,\nu\right\rangle ,s,e\right)\\
\mathtt{scall}\left(\left\langle FP_{n},C\right\rangle ,p,t,f,\left\langle \sigma,\alpha,\tau,\nu\right\rangle ,s,e\right) & = & \begin{cases}
\left\langle \left\langle \sigma,\alpha',\tau\right\rangle ,s',r,\nu'\right\rangle \ \mbox{where}\ \left\langle \left\langle \sigma',\alpha',\tau'\right\rangle ,s',r,\nu'\right\rangle =f\ n\ \left\langle C\backslash p,\alpha,\tau,\nu\right\rangle \ s & N\left(C\right)+N\left(p\right)=arity_{n}\\
\left\langle \left\langle \sigma,\alpha,\tau\right\rangle ,s,\left\langle FP_{n},C\backslash p\right\rangle ,\nu\left[\left\langle e,n,N\left(C\right)+N\left(p\right)\right\rangle \mapsto C\backslash p\right]\right\rangle  & \mbox{otherwise}
\end{cases}
\end{eqnarray*}

\end_inset


\end_layout

\end_body
\end_document
